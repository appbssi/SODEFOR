/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a public read, owner-write model for personnel data and restricts attendance record creation.
 *
 * Data Structure:
 * - /personnel/{personnelId}: Stores personnel information. Read access is public. Write access is restricted to authenticated users.
 * - /attendance/{attendanceId}: Stores attendance records. Write access is restricted to authenticated users.
 *
 * Key Security Decisions:
 * - Personnel data is publicly readable to support general access to directory information.
 * - Only authenticated users can create, update, or delete personnel records.
 * - Attendance records can only be created by authenticated users.
 *
 * Denormalization for Authorization:
 * - The 'Personnel' entity does not have an 'ownerId' or 'authorId' field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to personnel data, but restricts writes to authenticated users.
     * @path /personnel/{personnelId}
     * @allow (get, list): Any user can read personnel information.
     * @allow (create, update, delete): Only authenticated users can create, update, or delete personnel records.
     * @deny create, update, delete: if !isSignedIn();
     * @principle Allows public read access but requires authentication for write operations.
     */
    match /personnel/{personnelId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to create attendance records.
     * @path /attendance/{attendanceId}
     * @allow (create): Any authenticated user can create attendance records.
     * @deny create: if !isSignedIn();
     * @principle Restricts attendance record creation to authenticated users.
     */
    match /attendance/{attendanceId} {
      allow get, list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    // Helper function to check if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}